name: DevSecOps CI CD Pipeline for Juice Shop

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write
  security-events: write
  actions: write
  issues: write

jobs:
  # Job 1: Static Application Security Testing (SAST) with CodeQL
  codeql_analysis:
    name: Perform Static Application Security Testing (SAST) with CodeQL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended
         
          config: |
            paths-ignore:
              - 'data/static/codefixes'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif

      - name: Upload CodeQL Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-scan-results
          path: codeql-results.sarif

  # Job 2: Software Composition Analysis (SCA) using OWASP Dependency Check
  dependency_check:
    name: Perform Software Composition Analysis (SCA) with OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: codeql_analysis  
    steps:
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          format: "JSON"
          project: JuiceShop
          path: "."
          out: "."
          args: "--exclude ../../ftp/legal.md --exclude ../../frontend/dist/frontend/assets/public/videos/owasp_promo.vtt"

      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: dependency-check-report.json


          
  # Job 3: Build, Deploy, and Scan with ZAP
  build_deploy_and_zap_scan:
    name: Build, Deploy, and Run ZAP Scan for Juice Shop
    runs-on: ubuntu-latest
    needs: dependency_check  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: juice-shop:latest

      - name: Deploy Juice Shop
        run: docker run -d --name juice-shop -p 3000:3000 juice-shop:latest

      - name: Wait for Juice Shop to Start
        run: |
          echo "Waiting for Juice Shop to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Juice Shop is ready!"
              exit 0
            fi
            sleep 5
          done
          echo "Juice Shop failed to start."
          exit 1

      # Step 6: Run Dynamic Application Security Testing (DAST) with ZAP
      - name: Run ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'

      - name: Upload ZAP Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: /home/runner/work/github-actions/github-actions/*.html

      - name: Stop and Remove Juice Shop Container
        if: always()
        run: docker stop juice-shop && docker rm juice-shop


      #Setup defectojo instancce
      - name: Start DefectDojo Instance
        run: |
          docker run -d --name defectdojo -p 8080:8080 defectdojo/defectdojo-django:latest
          echo "Waiting for DefectDojo to initialize..."
          sleep 60  # Allow time for DefectDojo to start
   
      - name: Get DefectDojo API Key
        id: get_api_key
        run: |
          API_URL="http://localhost:8080/api/v2/"
          ADMIN_USERNAME="admin"
          ADMIN_PASSWORD="admin"

          # Log in to get API token
          RESPONSE=$(curl -X POST "${API_URL}login/" \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"${ADMIN_USERNAME}\", \"password\": \"${ADMIN_PASSWORD}\"}")
          API_KEY=$(echo $RESPONSE | jq -r '.token')
          echo "DOJO_API_KEY=${API_KEY}" >> $GITHUB_ENV

      - name: Create Engagement in DefectDojo
        id: create_engagement
        run: |
          API_URL="http://localhost:8080/api/v2/"
          PRODUCT_ID=1  # Change this if a different product ID is needed

          RESPONSE=$(curl -X POST "${API_URL}engagements/" \
            -H "Authorization: Token ${{ env.DOJO_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"Juice Shop CI Engagement\", \"product\": ${PRODUCT_ID}, \"status\": \"In Progress\"}")
          ENGAGEMENT_ID=$(echo $RESPONSE | jq -r '.id')
          echo "ENGAGEMENT_ID=${ENGAGEMENT_ID}" >> $GITHUB_ENV

      - name: Upload CodeQL Results to DefectDojo
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ env.DOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=CodeQL" \
            -F "file=@codeql-scan-results.zip" \
            -F "engagement=${{ env.ENGAGEMENT_ID }}"

      - name: Upload Dependency Check Results to DefectDojo
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ env.DOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=Dependency Check" \
            -F "file=@owasp-dependency-check-report.json" \
            -F "engagement=${{ env.ENGAGEMENT_ID }}"

      - name: Upload ZAP Results to DefectDojo
        run: |
          curl -X POST "http://localhost:8080/api/v2/import-scan/" \
            -H "Authorization: Token ${{ env.DOJO_API_KEY }}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_type=ZAP Scan" \
            -F "file=@zap-results.html" \
            -F "engagement=${{ env.ENGAGEMENT_ID }}"

      - name: Stop and Remove DefectDojo Instance
        if: always()
        run: |
          docker stop defectdojo
          docker rm defectdojo
